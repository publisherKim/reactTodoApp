'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = penderMiddleware;

var _actionTypes = require('./actionTypes');

var _actionTypes2 = _interopRequireDefault(_actionTypes);

var _penderize = require('./penderize');

var _penderize2 = _interopRequireDefault(_penderize);

var _eventemitter = require('eventemitter3');

var _eventemitter2 = _interopRequireDefault(_eventemitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PENDING = _actionTypes2.default.PENDING,
    SUCCESS = _actionTypes2.default.SUCCESS,
    FAILURE = _actionTypes2.default.FAILURE,
    CANCEL = _actionTypes2.default.CANCEL;


var _id = 0;
function generatePenderId() {
    return _id++;
}

/**
 * Middleware that pends and handles the promises
 * @param {object} config
 * @returns {function} middleware
 */
function penderMiddleware() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { major: true, serverPender: null };

    var EE = new _eventemitter2.default();

    var _config$major = config.major,
        major = _config$major === undefined ? true : _config$major,
        _config$serverPender = config.serverPender,
        serverPender = _config$serverPender === undefined ? null : _config$serverPender;


    return function (store) {
        return function (next) {
            return function (action) {
                /**
                 * checks whether the given parameter is a promise
                 * 
                 * @param {object} promise 
                 * @returns {boolean} 
                 */
                function isPromise(promise) {
                    if (!promise) return false;
                    return promise.then && promise.catch;
                }

                /**
                 * extracts promise from the action
                 * 
                 * @param {object} action 
                 * @returns {Promise} promise
                 */
                function getPromise(action) {
                    var payload = action.payload;


                    if (!payload) return null; // there is no payload

                    // when 'major' option is true
                    if (major === true) {
                        if (isPromise(payload)) return payload;
                    }

                    // case when major is false
                    var pend = action.payload.pend;

                    if (isPromise(pend)) return pend;

                    return null;
                }

                var promise = getPromise(action); // get the promise from the action
                if (!promise) return next(action); // if there is no promise, skip this action


                var type = action.type,
                    meta = action.meta; // get the details of the action

                var penderized = (0, _penderize2.default)(type); // create the penderized action types


                // inform that the promise has started
                store.dispatch({
                    type: penderized.PENDING,
                    meta: meta
                });

                // log this in pender reducer
                store.dispatch({
                    type: PENDING,
                    payload: type
                });

                // handle the promise
                var cancelled = false;
                var penderId = generatePenderId();

                var handleCancel = null;
                var handleResolve = null;

                var unsubscribe = function unsubscribe() {
                    EE.removeListener('cancel', handleCancel);
                    EE.removeListener('resolve', handleResolve);
                };

                var cancel = function cancel() {
                    EE.emit('cancel', penderId);
                };

                var resolveCancellation = function resolveCancellation() {
                    EE.emit('resolve', penderId);
                };

                var cancellation = function cancellation(type) {
                    return new Promise(function (resolve, reject) {
                        handleCancel = function handleCancel(id) {
                            if (id === penderId) {
                                cancelled = true;
                                unsubscribe();
                                store.dispatch({
                                    type: CANCEL,
                                    payload: type
                                });
                                store.dispatch({
                                    type: penderized.CANCEL,
                                    meta: meta
                                });
                                reject(new Error(type + '(' + id + ') is cancelled'));
                            }
                        };

                        handleResolve = function handleResolve(id) {
                            if (id === penderId) {
                                unsubscribe();
                                resolve();
                            }
                        };

                        EE.once('cancel', handleCancel);
                        EE.once('resolve', handleResolve);
                    });
                };

                var p = promise.then(function (result) {
                    if (cancelled) return;
                    resolveCancellation();

                    // promise is resolved
                    // result will be assigned as payload
                    store.dispatch({
                        type: penderized.SUCCESS,
                        payload: result,
                        meta: meta
                    });

                    // log this in pender reducer
                    store.dispatch({
                        type: SUCCESS,
                        payload: type
                    });
                }).catch(function (error) {
                    if (cancelled) return;
                    resolveCancellation();

                    if (process.env.NODE_ENV === 'development') {
                        // print error in development environment
                        console.error(error);
                    }
                    // promise is rejected
                    // error will be assigned as payload
                    store.dispatch({
                        type: penderized.FAILURE,
                        payload: error,
                        meta: meta,
                        error: true
                    });

                    // log this in pender reducer
                    store.dispatch({
                        type: FAILURE,
                        payload: type
                    });
                });

                var cancellablePromise = Promise.race([promise, cancellation(type)]);
                cancellablePromise.cancel = cancel;

                if (serverPender) {
                    serverPender.register(cancellablePromise);
                }

                return cancellablePromise;
            };
        };
    };
}