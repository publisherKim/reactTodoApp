{"ast":null,"code":"import _classCallCheck from \"C:\\\\study\\\\chapter10\\\\immutable-concept\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\study\\\\chapter10\\\\immutable-concept\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\study\\\\chapter10\\\\immutable-concept\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\study\\\\chapter10\\\\immutable-concept\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\study\\\\chapter10\\\\immutable-concept\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\study\\\\chapter10\\\\immutable-concept\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Immutable from 'immutable';\nvar Map = Immutable.Map;\nvar data = Map({\n  a: 1,\n  b: 2\n});\nconsole.log('Map 생성: ', data);\nvar data1 = Map({\n  a: 1,\n  b: 2,\n  c: Map({\n    d: 3,\n    e: 4,\n    f: 5\n  })\n});\nconsole.log('Map 계층구조 생성: ', data1); // 객체 상태가 복잡할 경우에는 fromJS를 통해서 만들자. 최적화보단 fromJS써도 된다.\n\nvar fromJS = Immutable.fromJS;\nvar data2 = fromJS({\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: 4,\n    f: 5\n  }\n});\nconsole.log('fromJS: ', data2); // 자바스크립트 객체로 변환\n\nvar deserialized = data2.toJS();\nconsole.log('deserialized: ', deserialized); // 특정키의 값 불러오기\n\nconsole.log(data2.get('a')); // 계층구조가 깊을때 불러오기\n\nconsole.log(data2.getIn(['c', 'd'])); // 값 설정\n\nvar newData = data2.set('a', 4);\nconsole.log(newData.get('a'));\nconsole.log('두개의 데이터는 같은 참조를 가지지 않는다.: ', newData === data2); // 깊숙이 위치하는 값 수정\n\nvar newData2 = data2.setIn(['c', 'd'], 10);\nconsole.log(newData2.getIn(['c', 'd'])); // 여러 값 동시에 설정\n\nvar newData3 = data2.mergeIn(['c'], {\n  d: 5,\n  e: 1\n});\nconsole.log(newData3.getIn(['c', 'd']));\nconsole.log(newData3.getIn(['c', 'e']));\nvar newData4 = data2.merge({\n  a: 1,\n  b: 2\n});\nconsole.log(newData4.get('a'));\nconsole.log(newData4.get('b'));\nvar newData5 = data2.setIn(['c', 'd'], 20).setIn(['c', 'e'], 7);\nconsole.log(newData5.getIn(['c', 'd']));\nconsole.log(newData5.getIn(['c', 'e']));\nvar List = Immutable.List;\nvar list = List([0, 1, 2, 3, 4]);\nconsole.log(list);\nvar list2 = List([Map({\n  value: 1\n}), Map({\n  value: 2\n})]);\nconsole.log(list2, list2.toJS());\nvar list3 = fromJS([{\n  value: 1\n}, {\n  value: 2\n}]);\nconsole.log(list3, list3.toJS()); // 값 읽어오기\n\nlist2.get(0);\nconsole.log(list2.get(0));\nconsole.log(list2.getIn([0, 'value'])); // 아이템 수정\n// 원소를 통으로 바꾸고 싶을때\n\nvar newList = list2.set(0, Map({\n  value: 5\n}));\nconsole.log(newList.getIn([0, 'value'])); // 내부의 값만 변경\n\nvar newList2 = list2.setIn([0, 'value'], 3);\nconsole.log(newList2.getIn([0, \"value\"])); // update 활용\n\nvar newList3 = list2.update(0, function (item) {\n  return item.set('value', item.get('value') * 10);\n});\nconsole.log(newList3.getIn([0, 'value']));\nvar newList4 = list2.setIn([0, 'value'], list2.getIn([1, 'value']) * 2);\nconsole.log(newList4.getIn([0, 'value'])); // 아이템 추가\n\nvar newList5 = list2.push(Map({\n  value: 3\n}));\nconsole.log(newList5.getIn([2, 'value']));\nvar newList6 = list2.unshift(Map({\n  value: 0\n}));\nconsole.log(newList6.toJS()); // 아이템 제거\n\nvar newList7 = list2.delete(1);\nconsole.log(newList7.getIn([1, 'value']), newList7.toJS());\nvar newList8 = list2.shift();\nconsole.log(newList8.getIn([1, \"value\"]), newList8.toJS());\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"immtable concept console\\uC744 \\uD1B5\\uD574 \\uC775\\uD788\\uAE30\");\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\study\\chapter10\\immutable-concept\\src\\App.js"],"names":["React","Component","Immutable","Map","data","a","b","console","log","data1","c","d","e","f","fromJS","data2","deserialized","toJS","get","getIn","newData","set","newData2","setIn","newData3","mergeIn","newData4","merge","newData5","List","list","list2","value","list3","newList","newList2","newList3","update","item","newList4","newList5","push","newList6","unshift","newList7","delete","newList8","shift","App"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Immutable from 'immutable';\n\nconst { Map } = Immutable;\n\nconst data = Map({\n  a: 1,\n  b: 2\n});\nconsole.log('Map 생성: ', data);\n\nconst data1 = Map({\n  a: 1,\n  b: 2,\n  c: Map({\n    d: 3,\n    e: 4,\n    f: 5\n  })\n});\nconsole.log('Map 계층구조 생성: ', data1);\n\n// 객체 상태가 복잡할 경우에는 fromJS를 통해서 만들자. 최적화보단 fromJS써도 된다.\nconst { fromJS } = Immutable;\nconst data2 = fromJS({\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: 4,\n    f: 5\n  }\n});\nconsole.log('fromJS: ',  data2);\n\n// 자바스크립트 객체로 변환\nconst deserialized = data2.toJS();\nconsole.log('deserialized: ', deserialized);\n\n\n// 특정키의 값 불러오기\nconsole.log(data2.get('a'));\n\n// 계층구조가 깊을때 불러오기\nconsole.log(data2.getIn(['c', 'd']));\n\n// 값 설정\nconst newData = data2.set('a', 4);\nconsole.log(newData.get('a'));\nconsole.log('두개의 데이터는 같은 참조를 가지지 않는다.: ', newData === data2);\n\n// 깊숙이 위치하는 값 수정\nconst newData2 = data2.setIn(['c', 'd'], 10);\nconsole.log(newData2.getIn(['c', 'd']));\n\n// 여러 값 동시에 설정\nconst newData3 = data2.mergeIn(['c'], { d: 5, e: 1});\nconsole.log(newData3.getIn(['c', 'd']));\nconsole.log(newData3.getIn(['c', 'e']));\n\nconst newData4 = data2.merge({a: 1, b: 2});\nconsole.log(newData4.get('a'));\nconsole.log(newData4.get('b'));\n\nconst newData5 = data2.setIn(['c', 'd'], 20)\n                      .setIn(['c', 'e'], 7);\nconsole.log(newData5.getIn(['c', 'd']));\nconsole.log(newData5.getIn(['c', 'e']));\n\nconst { List } = Immutable;\nconst list = List([0, 1, 2, 3, 4]);\nconsole.log(list);\n\nconst list2 = List([\n  Map({ value: 1}),\n  Map({ value: 2 })\n]);\nconsole.log(list2, list2.toJS());\n\nconst list3 = fromJS([\n  { value: 1 },\n  { value: 2 }\n])\nconsole.log(list3, list3.toJS());\n\n// 값 읽어오기\nlist2.get(0);\nconsole.log(list2.get(0));\nconsole.log(list2.getIn([0, 'value']));\n\n// 아이템 수정\n// 원소를 통으로 바꾸고 싶을때\nconst newList = list2.set(0, Map({ value: 5 }));\nconsole.log(newList.getIn([0, 'value']));\n\n// 내부의 값만 변경\nconst newList2 = list2.setIn([0, 'value'], 3);\nconsole.log(newList2.getIn([0, \"value\"]));\n\n// update 활용\nconst newList3 = list2.update(0, item => item.set('value', item.get('value') * 10));\nconsole.log(newList3.getIn([0, 'value']));\n\nconst newList4 = list2.setIn([0, 'value'], list2.getIn([1, 'value']) * 2);\nconsole.log(newList4.getIn([0, 'value']));\n\n// 아이템 추가\nconst newList5 = list2.push(Map({ value: 3}));\nconsole.log(newList5.getIn([2, 'value']));\nconst newList6 = list2.unshift(Map({ value: 0}));\nconsole.log(newList6.toJS());\n\n// 아이템 제거\nconst newList7 = list2.delete(1);\nconsole.log(newList7.getIn([1, 'value']), newList7.toJS());\n\nconst newList8 = list2.shift();\nconsole.log(newList8.getIn([1, \"value\"]), newList8.toJS());\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        immtable concept console을 통해 익히기\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}